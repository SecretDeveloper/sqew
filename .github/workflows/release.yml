name: Release and Publish

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write      # create releases
  packages: write      # push ghcr images

env:
  CARGO_TERM_COLOR: always

jobs:
  build-binaries:
    name: Build binaries
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux GNU
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_ext: tar.gz
            bin_ext: ""
            use_cross: false
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            asset_ext: tar.gz
            bin_ext: ""
            use_cross: true
          # Linux MUSL (static-ish)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            asset_ext: tar.gz
            bin_ext: ""
            use_cross: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            asset_ext: tar.gz
            bin_ext: ""
            use_cross: true
          # macOS Intel + Apple Silicon
          - os: macos-13
            target: x86_64-apple-darwin
            asset_ext: tar.gz
            bin_ext: ""
            use_cross: false
          - os: macos-14
            target: aarch64-apple-darwin
            asset_ext: tar.gz
            bin_ext: ""
            use_cross: false
          # Windows x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_ext: zip
            bin_ext: .exe
            use_cross: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Install cross (if needed)
        if: matrix.use_cross == true
        run: cargo install cross --locked

      - name: Add Rust target (if native)
        if: matrix.use_cross == false
        run: rustup target add ${{ matrix.target }}

      - name: Build (release)
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${{ matrix.use_cross }}" == "true" ]]; then
            cross build --target ${{ matrix.target }} --release
          else
            cargo build --target ${{ matrix.target }} --release
          fi

      - name: Package artifact
        shell: bash
        run: |
          set -euo pipefail
          NAME="sqew"
          VERSION_TAG="${GITHUB_REF_NAME}"
          VERSION_NO_V="${VERSION_TAG#v}"
          BIN_DIR="target/${{ matrix.target }}/release"
          BIN="$BIN_DIR/${NAME}${{ matrix.bin_ext }}"
          OUTDIR="dist"
          mkdir -p "$OUTDIR"
          ASSET="${NAME}-${VERSION_NO_V}-${{ matrix.target }}.${{ matrix.asset_ext }}"
          if [[ "${{ matrix.asset_ext }}" == "zip" ]]; then
            (cd "$BIN_DIR" && 7z a -tzip "../../../$OUTDIR/$ASSET" "${NAME}${{ matrix.bin_ext }}")
          else
            (cd "$BIN_DIR" && tar -czf "../../../$OUTDIR/$ASSET" "${NAME}${{ matrix.bin_ext }}")
          fi
          echo "ASSET=$ASSET" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ASSET }}
          path: dist/${{ env.ASSET }}

  docker:
    name: Docker build and push (GHCR)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [ build-binaries, docker ]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            dist/**
